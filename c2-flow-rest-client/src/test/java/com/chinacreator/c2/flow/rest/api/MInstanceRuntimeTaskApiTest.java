/**
 * 工作流接口文档
 * 工作流接口文档
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.chinacreator.c2.flow.rest.api;

import java.util.ArrayList;
import java.util.List;

import org.joda.time.DateTime;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import com.chinacreator.c2.flow.rest.ApiException;
import com.chinacreator.c2.flow.rest.model.PageListResponseWfTaskResponse;
import com.chinacreator.c2.flow.rest.model.WfActionResult;
import com.chinacreator.c2.flow.rest.model.WfCommentResponse;
import com.chinacreator.c2.flow.rest.model.WfProcessInstanceCreateRequest;
import com.chinacreator.c2.flow.rest.model.WfProcessInstanceResponse;
import com.chinacreator.c2.flow.rest.model.WfRestVariable;
import com.chinacreator.c2.flow.rest.model.WfTaskActionRequest;
import com.chinacreator.c2.flow.rest.model.WfTaskActionRequest.ActionEnum;
import com.chinacreator.c2.flow.rest.model.WfTaskRequest;
import com.chinacreator.c2.flow.rest.model.WfTaskResponse;

/**
 * API tests for RuntimeTaskApi
 */
public class MInstanceRuntimeTaskApiTest {

    private final RuntimeTaskApi api = new RuntimeTaskApi();
    
    private final RuntimeInstanceApi runtimeInstanceApi = new RuntimeInstanceApi();
    
    private static WfProcessInstanceResponse wfProcessInstanceResponse=null;
    private static WfTaskResponse wfTaskResponse=null;
    private static WfCommentResponse wfCommentResponse=null;
    
    
    @Before
    public void init()  throws ApiException{
    	//创建流程实例
        WfProcessInstanceCreateRequest body = new WfProcessInstanceCreateRequest();
        body.setProcessDefinitionKey("d1");
        WfRestVariable wfRestVariable=new WfRestVariable();
        wfRestVariable.setName("userId");
        wfRestVariable.setType(WfRestVariable.TypeEnum.LONG);
        wfRestVariable.setValue("test_user");
        wfRestVariable.setVariableScope(WfRestVariable.VariableScopeEnum.GLOBAL);
        body.addVariablesItem(wfRestVariable);
        wfProcessInstanceResponse = runtimeInstanceApi.createProcessInstance(body);
    }
    
    
    /**
     * 待办列表
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTasksTest() throws ApiException {
        String name = null;
        String nameLike = null;
        String description = null;
        String descriptionLike = null;
        Integer priority = null;
        Integer minimumPriority = null;
        Integer maximumPriority = null;
        String assignee = null;
        String owner = null;
        Boolean unassigned = null;
        String delegationState = null;
        String candidateUser = null;
        String involvedUser = null;
        String candidateGroup = null;
        String processDefinitionKey = null;
        String processDefinitionKeyLike = null;
        String processDefinitionName = null;
        String processDefinitionNameLike = null;
        String processInstanceId = wfProcessInstanceResponse.getId();
        String processInstanceBusinessKey = null;
        String executionId = null;
        DateTime createdOn = null;
        DateTime createdBefore = null;
        DateTime createdAfter = null;
        Boolean excludeSubTasks = null;
        String taskDefinitionKey = null;
        String taskDefinitionKeyLike = null;
        DateTime dueDate = null;
        DateTime dueBefore = null;
        DateTime dueAfter = null;
        Boolean active = null;
        Boolean includeTaskLocalVariables = null;
        Boolean includeProcessVariables = null;
        String tenantId = null;
        String tenantIdLike = null;
        Boolean withoutTenantId = null;
        PageListResponseWfTaskResponse pageListResponseWfTaskResponse = api.getTasks(name, nameLike, description, descriptionLike, priority, minimumPriority, maximumPriority, assignee, owner, unassigned, delegationState, candidateUser, involvedUser, candidateGroup, processDefinitionKey, processDefinitionKeyLike, processDefinitionName, processDefinitionNameLike, processInstanceId, processInstanceBusinessKey, executionId, createdOn, createdBefore, createdAfter, excludeSubTasks, taskDefinitionKey, taskDefinitionKeyLike, dueDate, dueBefore, dueAfter, active, includeTaskLocalVariables, includeProcessVariables, tenantId, tenantIdLike, withoutTenantId);
        Assert.assertFalse("获取已办数据不能为空",pageListResponseWfTaskResponse.getData().size()>0);
        wfTaskResponse=pageListResponseWfTaskResponse.getData().get(0);
    }
    
    /**
     * 添加任务意见
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCommentTest() throws ApiException {
        String taskId = null;
        WfCommentResponse body = new WfCommentResponse();
        body.setAuthor("comment_user1");
        body.setMessage("junit comment");
        wfCommentResponse = api.createComment(wfTaskResponse.getId(), body);

    }
    
    
    
    /**
     * 获取某任务下某条意见详细
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCommentTest() throws ApiException {
    	WfCommentResponse response = api.getComment(wfTaskResponse.getId(), wfCommentResponse.getId());
    }
    
    
    /**
     * 获取某任务意见列表
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCommentsTest() throws ApiException {
        List<WfCommentResponse> response = api.getComments(wfTaskResponse.getId());
    }
    
    
    /**
     * 删了某任务下某条意见
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCommentTest() throws ApiException {
        api.deleteComment(wfTaskResponse.getId(), wfCommentResponse.getId());
    }
    
    
    /**
     * 批量添加任务流程变量
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTaskVariableTest() throws ApiException {
        String taskId = null;
        List<WfRestVariable> body = new ArrayList<>();
        WfRestVariable wf=new WfRestVariable();
        wf.setName("junit_var");
        wf.setType(WfRestVariable.TypeEnum.STRING);
        wf.setValue("junit var value");
        wf.setVariableScope(WfRestVariable.VariableScopeEnum.GLOBAL);
        List<WfRestVariable> response = api.createTaskVariable(wfTaskResponse.getId(), body);
    }
    
    /**
     * 获取某任务某流程变量
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVariableTest() throws ApiException {
        String taskId = null;
        String variableName = null;
        String scope = null;
        // WfRestVariable response = api.getVariable(taskId, variableName, scope);

        // TODO: test validations
    }
    
    
    /**
     * 获取某任务流程变量集合
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVariablesTest() throws ApiException {
        List<WfRestVariable> response = api.getVariables(wfTaskResponse.getId(),WfRestVariable.VariableScopeEnum.GLOBAL.name());
    }
    
    
    /**
     * 批量删除任务流程变量
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAllLocalTaskVariablesTest() throws ApiException {
    	api.deleteAllLocalTaskVariables(wfTaskResponse.getId());
    }
    
    
    /**
     * 获取任务信息
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTaskTest() throws ApiException {
        WfTaskResponse response = api.getTask(wfTaskResponse.getId(),null,null);
    }

    /**
     * 修改任务
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTaskTest() throws ApiException {
        WfTaskRequest body = new WfTaskRequest();
        body.setDescription("update desc from updateTaskTest");
        WfTaskResponse response = api.updateTask(wfTaskResponse.getId(), body);
    }
    
    
    /**
     * 处理任务
     *
     * 处理任务：签收(CLAIM)、签收并完成(CLAIM_COMPLETE)、完成(COMPLETE)、委托代理(DELEGATE)、回绝委托代理(RESOLVE)、退回任务(REJECT)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void executeTaskActionTest() throws ApiException {
        String taskId = null;
        WfTaskActionRequest body = new WfTaskActionRequest();
        body.setAction(ActionEnum.CLAIM_COMPLETE);
        body.setCurrentLoginUserId("test_user");
        WfActionResult response = api.executeTaskAction(wfTaskResponse.getId(), body);
    }
    
    
    /**
     * 删除任务
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTaskTest() throws ApiException {
        String taskId = null;
        Boolean cascadeHistory = null;
        String deleteReason = null;
        //api.deleteTask(taskId, cascadeHistory, deleteReason);

        // TODO: test validations
    }
    

    
}
